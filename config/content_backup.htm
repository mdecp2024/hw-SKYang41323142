<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-SKYang41323142">https://github.com/mdecp2024/hw-SKYang41323142</a></p>
<p>個人網站: <a href="https://mde.tw/cp2024/content/index.html">https://mde.tw/cp2024/content/index.html </a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p style="padding-left: 30px;"><a href="https://animated-fiesta-6949rp7w4vw7hxvqx-8081.app.github.dev/content/index.html">https://animated-fiesta-6949rp7w4vw7hxvqx-8081.app.github.dev/content/index.html</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/YuW1oHEmz6g?si=DFhSzA7VCEDMnQOi" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p><strong> 題目一</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/trGa7r4xZaY?si=kmzpoHKOhpk4NLzQ" title="YouTube video player" width="560"></iframe></p>
<p><strong>題目二</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/P1DXAq94Fvg?si=-z-6Pi3L9eiRJqmq" title="YouTube video player" width="560"></iframe></p>
<p><strong>題目三</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ONM3HWMLzTs?si=tnPl13fhi8LA-8Tz" title="YouTube video player" width="560"></iframe></p>
<h3>w11</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p><strong>1.在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域<a href="https://gist.githubusercontent.com/SKYang41323142/f387b61a7240e67ad5b3223f163d78c9/raw/9b1e5a846edfa4d171a2999b44ce5c9c4a582da9/w11.py">(Gist)</a></strong></p>
<p>code:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義區域大小
width = 41  # 橫向大小（更高解析度）
height = 21  # 縱向大小

# 圓心位置
center_x = width // 2  # 圓心 x 坐標，取寬度的一半
center_y = height // 2  # 圓心 y 坐標，取高度的一半

# 圓的半徑
radius = 10  # 圓的半徑長度

# 縱向縮放比例
vertical_scale = 2.2  # 修正字元比例，使圓形看起來更接近真圓

# 繪製圓形
for y in range(height):  # 遍歷每一行
    for x in range(width):  # 遍歷每一列
        # 計算每個點與圓心的距離
        dx = x - center_x  # x 軸距離
        dy = (y - center_y) * vertical_scale  # y 軸距離，乘以縱向縮放比例
        distance_squared = dx ** 2 + dy ** 2  # 計算與圓心的平方距離
        
        # 使用不同字符根據距離漸變
        if distance_squared &lt;= radius ** 2:  # 判斷是否在圓的範圍內
            if distance_squared &gt; (radius - 1) ** 2:  # 判斷是否在邊界區域
                print(".", end="")  # 邊界區域用 "."
            else:
                print("*", end="")  # 圓內區域用 "*"
        else:
            print(" ", end="")  # 圓外區域留空
    print()  # 換行，開始下一行繪製</pre>
<p><br/><br/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/slg37RfC3Qw?si=iox9rYXESjrwcJ75" title="YouTube video player" width="560"></iframe></p>
<h4><span>2.使用 Brython 圍出圓形方格區域<a href="https://gist.githubusercontent.com/SKYang41323142/faed1bcd6c72da2b83d93eca802370a8/raw/c811128ba8419b167969f43b10e97cffa8680c11/w11-2.py">(Gist)</a></span></h4>
<p>code :</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html  # 引入 html 模組，用於建立 DOM 元素
from browser import document as doc  # 引入 document，操作網頁內容

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)  # 建立一個 400x400 的畫布
brython_div = doc["brython_div1"]  # 取得網頁中 id 為 brython_div1 的元素
brython_div &lt;= canvas  # 將畫布加入到網頁中指定的 div 元素中

# 每一格的 pixel 數
gs = 20  # 定義每個網格的像素大小為 20px

# canvas 的上下文
ctx = canvas.getContext("2d")  # 獲取 2D 繪圖上下文，進行繪圖操作

def dRect(lux, luy, w, h, s=1, c="lightgrey"):
    """繪製網格框"""
    ctx.lineWidth = s  # 設定框線寬度
    ctx.strokeStyle = c  # 設定框線顏色
    ctx.beginPath()  # 開始繪製路徑
    ctx.rect(lux, luy, w, h)  # 繪製矩形，左上角座標 (lux, luy)，寬 w，高 h
    ctx.stroke()  # 描繪路徑

def grid(width, height, grid_pix):
    """繪製網格"""
    for i in range(width):  # 遍歷每一列
        for j in range(height):  # 遍歷每一行
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")  # 繪製單個網格框

def fill(x, y, color):
    """填充顏色"""
    ctx.fillStyle = color  # 設定填充顏色
    ctx.fillRect(x * gs, y * gs, gs, gs)  # 填充矩形，位置 (x, y)，大小為 gs x gs

# 繪製網格
grid(11, 11, gs)  # 繪製 11x11 的網格，每格大小為 gs

# 定義圓的參數
width, height = 11, 11  # 圖形範圍的寬與高（以網格單位表示）
center_x, center_y = 5, 5  # 圓心座標（以網格單位表示）
radius = 5  # 圓的半徑（以網格單位表示）

# 填充圓形內部區域
for y in range(height):  # 遍歷每一行
    for x in range(width):  # 遍歷每一列
        # 計算點到圓心的距離
        distance = ((x - center_x) ** 2 + (y - center_y) ** 2) ** 0.5  # 使用歐幾里得距離公式
        if distance &lt;= radius:  # 判斷是否在圓的範圍內
            fill(x, y, "black")  # 在符合條件的點填充黑色</pre>
<p><strong>邏輯說明</strong></p>
<ol>
<li>修改 Brython 程式，根據圓的公式判斷每個方格是否位於圓形區域內。</li>
<li>使用黑色塊填充圓形的方格。</li>
</ol>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/sqQt2O9nHzM?si=hwv7uEVXXkyHA4su" title="YouTube video player" width="560"></iframe></p><h3>w12_hw</h3>
<p><span>1. 請各組組員分別利用 </span><span>Brython 以及 Jupyter lab</span><span> 環境, 執行</span><a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> notebook 目錄中的 </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 </span><span>Gist</span><span> 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</span></p>
<p><strong><span>1.for迴圈跟print的範例程式</span></strong></p>
<p>code<strong><span> : </span></strong></p>
<p># 定義一個清單</p>
<p><code>fruits = ["蘋果", "香蕉", "橘子", "芒果"]</code></p>
<p><code># 用 for 迴圈列印每個水果</code><br/><code>for fruit in fruits:</code><br/><code> print(f"我最喜歡的水果之一是: {fruit}")</code></p>
<p><strong><span>My gist : <a href="https://gist.githubusercontent.com/SKYang41323142/7cd202b279f10659564ef78c3685ce76/raw/79b0594e2c6a4c18e5268b9379acca6203fe4420/gistfile1.txt">for迴圈跟print的範例程式</a></span></strong></p>
<h4><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/d-XmrnGn4AI?si=gPfjGxmQthbAwvb4" title="YouTube video player" width="560"></iframe></h4>
<h4><strong>執行心得</strong></h4>
<ol>
<li>
<p><strong>學到的概念</strong></p>
<ul>
<li><code>for</code> 迴圈的便利性：可以用於處理範圍內的數字或列表等集合資料。</li>
<li>配合條件判斷後，可以輕鬆篩選數據或進行分類。</li>
<li>使用 <code>f-string</code> 增強輸出的可讀性，讓結果更清楚。</li>
</ul>
</li>
<li>
<p><strong>遇到的問題</strong></p>
<ul>
<li><strong>問題</strong>：剛開始不熟悉 <code>range()</code> 的起始與結束值。
<ul>
<li>解釋：<code>range(start, end)</code> 包含起始值但不包含結束值，因此需注意範圍邊界。</li>
</ul>
</li>
<li><strong>解決方法</strong>：多次嘗試不同的範圍設置，熟悉 <code>range()</code> 的運作方式。</li>
</ul>
</li>
</ol>
<p><strong>2.<code>for</code> 迴圈與字串操作的範例程式</strong></p>
<p>code<strong><span> : </span></strong></p>
<p><code># 定義一個字串</code><br/><code>text = "Hello, World!"</code></p>
<p><code># 使用 for 迴圈遍歷字串中的每個字元</code><br/><code>for char in text:</code><br/><code> print(f"字元: {char}")</code></p>
<p><strong><span>My gist : <a href="https://gist.githubusercontent.com/SKYang41323142/60de140f7c62ae8aeae0b356b5c2bd79/raw/528227a7a194350d40a2db794250d78986299571/gistfile1.txt">for 迴圈與字串操作的範例程式</a></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/rDjeI4hz4WI?si=XWYph4zAoXT0aGQb" title="YouTube video player" width="560"></iframe></span></strong></p>
<h4>執行心得</h4>
<ol>
<li>
<p><strong>學到的概念</strong></p>
<ul>
<li>字串本質上是一個字元的集合，能夠像列表一樣進行遍歷。</li>
<li>使用 <code>for</code> 迴圈結合 <code>print()</code>，可以輕鬆觀察每個字元的內容。</li>
</ul>
</li>
</ol>
<h3>w13_hw</h3>
<p><strong><span>My gist : <a href="https://gist.githubusercontent.com/SKYang41323142/809d5fe050ba949c183eb3e17cb57716/raw/d599af82c115b9e22845fb47ae3794445a1c50d4/gistfile1.txt">最終程式</a></span></strong></p>
<p>解題思考: 透過點座標的掃瞄, 先採用尺寸較大格點 (如每 10 pixel 掃描一點), 即可判定點群位於那一個特定區域並進行著色. 當掃描細至單一 pixel 時, 就可以完成區域著色.</p>
<p>另外, 透過 if 判定各點所在區域的條件組合, 可以就是否:</p>
<p>位於第一個圓內部</p>
<p>位於第二個圓內部</p>
<p>位於第一個正方形內部</p>
<p>位於第二個正方形內部第一個正方形上方、下方、左方、右方</p>
<p>位於第二個正方形上方、下方、左方、右方</p>
<p>位於對角線上方範圍</p>
<p>位於對角線下方範圍</p>
<p>等條件<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/c885949528f12bfa567ebbd2474d13ef4b5c1e46/if_append_brython.py">區分各區域的不同屬性</a>, 並設法利用這些區域屬性進行<a href="https://stackoverflow.com/questions/50528954/give-each-shape-on-html5-canvas-a-random-colour">顏色運算</a>.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/676c6f27ab33fd18873284c51b4c2c008d312c01/almost_right_brython.py">接近正確</a>以及<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/cb369d190d0e69a48e4d44dea5fcab660f4c0f18/almost_right2_brython.py">更細化</a>的著色範例.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/25a616bb5e60e5ca9003d954bb10772d0ab86ae8/rect_fill_color_1_brython.py">rect_fill_1</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/25a616bb5e60e5ca9003d954bb10772d0ab86ae8/rect_fill_color_2_brython.py">rect_fill_2</a></p>
<p><!-- 導入 brython 程式庫 --></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p><!-- 啟動 Brython --></p>
<script>
window.onload = function() {
    brython({debug: 1, pythonpath: ['/static/', './../downloads/py/']});
};
</script>
<!-- 畫布定位點 -->
<div id="brython_div1"></div>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import html
from browser import document as doc
import math
import random

# 建立畫布
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")
ctx.lineWidth = 4

# 隨機顏色函數
def random_color():
    return f"rgb({random.randint(0, 255)}, {random.randint(0, 255)}, {random.randint(0, 255)})"

# 畫布背景
ctx.fillStyle = "white"
ctx.fillRect(0, 0, 500, 500)

# 畫分段圓形
def draw_segmented_circle(x, y, radius, segments):
    for i in range(segments):
        start_angle = (i / segments) * 2 * math.pi
        end_angle = ((i + 1) / segments) * 2 * math.pi
        ctx.beginPath()
        ctx.arc(x, y, radius, start_angle, end_angle)
        ctx.lineTo(x, y)
        ctx.closePath()
        ctx.fillStyle = random_color()
        ctx.fill()
        ctx.strokeStyle = "black"
        ctx.stroke()

# 畫三角形
def draw_triangle(vertices, color="red"):
    ctx.beginPath()
    ctx.moveTo(*vertices[0])
    for vertex in vertices[1:]:
        ctx.lineTo(*vertex)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()
    ctx.strokeStyle = "black"
    ctx.stroke()

# 畫斜線
def draw_line(start, end, color="blue"):
    ctx.strokeStyle = color
    ctx.beginPath()
    ctx.moveTo(*start)
    ctx.lineTo(*end)
    ctx.stroke()

# 繪製內容
draw_segmented_circle(160, 160, 100, 6)  # 第一個圓
draw_segmented_circle(300, 300, 100, 6)  # 第二個圓

# 繪製三角形區域
draw_triangle([(50, 50), (50, 250), (250, 250)], random_color())
draw_triangle([(150, 150), (350, 150), (350, 350)], random_color())

# 繪製藍色斜線
draw_line((50, 50), (250, 250))
</script>
<h3>w14_hw</h3>
<p><strong><span>My gist : <a href="https://gist.githubusercontent.com/SKYang41323142/532f3b3c8a34a98c6d66d95e85e2f575/raw/9b8d80f4a6b57cc07b014e9b954913347a9dd806/gistfile1.txt">最終程式</a></span></strong></p>
<p><span>根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p><!-- 導入 Brython 程式庫 -->
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.3/brython.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.3/brython_stdlib.js"></script>
</p>
<p>
<script>
// 啟動 Brython
    window.onload = function () {
        brython();
    };
</script>
<!-- 畫布定位點 --></p>
<h3>w15</h3>
<h4>題目一:</h4>
<p>請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"<a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/2900287172b6672ca9e10019cd5850d8/raw/b7fa1f6a7c51836a4cecdf278b4c63000a5bc9ae/w15.py">從 1 累加到 100</a>"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化變數 sum，用來累計總和，初始值設為 0
sum = 0

# 使用 for 迴圈，從 0 遍歷到 100（包含 100）
for i in range(0, 101):  # range(0, 101) 會產生從 0 到 100 的整數序列
    sum += i  # 將當前的數字 i 累加到 sum 中

# 輸出最終累加的結果
print(sum)  # 輸出結果：5050</pre>
<h4>題目二:</h4>
<p>延伸上題, 設計一個函式 <a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/6f7be141b5e187f68758aac88b322869/raw/b4994abbee0451a8e4c781ae636ef22f51e4bb70/w15-2.py">addto(1, 100)</a>, 可以完成上述的累加結果. (以"<a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/6f7be141b5e187f68758aac88b322869/raw/b4994abbee0451a8e4c781ae636ef22f51e4bb70/w15-2.py">addto</a>"作為連結標題)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    """
    計算從 start 到 end 之間所有整數的總和。
     
    參數：
    start: 開始的整數
    end: 結束的整數（包含在內）
 
    返回：
    整數總和
    """
    sum = 0  # 初始化總和為 0
    for i in range(start, end + 1):  # 從 start 累加到 end，包含 end
        sum += i  # 將當前數字加入總和
    return sum  # 返回計算的總和
 
# 測試函式
result = addto(1, 100)  # 計算 1 到 100 的總和
print(result)  # 輸出結果
</pre>
<h4>題目三:</h4>
<p>延伸上題, 設計一個函式 <a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/6f7be141b5e187f68758aac88b322869/raw/b4994abbee0451a8e4c781ae636ef22f51e4bb70/w15-2.py">add_only_even(1, 100)</a>, 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. 頁面中請以 <a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/6f7be141b5e187f68758aac88b322869/raw/b4994abbee0451a8e4c781ae636ef22f51e4bb70/w15-2.py">add_only_even</a><span> 作為連結標題.</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    """
    計算從 start 到 end 之間所有整數的總和。
      
    參數：
    start: 開始的整數
    end: 結束的整數（包含在內）
  
    返回：
    整數總和
    """
    sum = 0  # 初始化總和為 0
    for i in range(start, end + 1):  # 從 start 累加到 end，包含 end
        sum += i  # 將當前數字加入總和
    return sum  # 返回計算的總和
  
# 測試函式
    result = addto(1, 100)  # 計算 1 到 100 的總和
    print(result)  # 輸出結果</pre>
<h4><span>題目四: </span></h4>
<p><span>延伸上題, 設計一個函式 <a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/c540a0a7855eb9c0b75443087ba7959d/raw/b39b2aa9d12530b702bccbc15e0cfafbc7502ec5/w15-4.py">add_avoid_8</a>(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數, 頁面中請以 <a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/c540a0a7855eb9c0b75443087ba7959d/raw/b39b2aa9d12530b702bccbc15e0cfafbc7502ec5/w15-4.py">add_avoid_8 </a>作為連結標題.</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義 add_avoid_8 函式，接受兩個參數 start 和 end
def add_avoid_8(start, end):
    """
    計算從 start 到 end（包含 end）之間所有不包含數字 '8' 的數字總和
    """
    total_sum = 0  # 初始化總和為 0
    # 遍歷從 start 到 end 之間的所有數字
    for i in range(start, end + 1):
        # 將數字轉換為字符串並檢查是否包含 '8'
        if '8' not in str(i):
            total_sum += i  # 如果不包含 '8'，將其加到總和中
    return total_sum  # 返回最終的累加和

# 呼叫 add_avoid_8 函式，計算從 1 到 100 之間不包含數字 '8' 的數字總和
result = add_avoid_8(1, 100)

# 輸出結果
print(result)  # 預期輸出結果： exclude numbers containing '8'</pre>
<h4>延伸第四題：<a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/77736df54b7c3e6cdaa80c8887f2123e/raw/f89a86b62e0b0a8e6a2844c43cbbec935e2b4de4/w15-5(extra%2520topic).py"><span class="hljs-title function_">add_avoid_8_and_3</span><span>(1</span><span class="hljs-params">, 100</span><span>)</span></a></h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8_and_3(start, end):
    """
    計算從 start 到 end（包含 end）之間所有不包含數字 '8' 或 '3' 的數字總和
    """
    total_sum = 0  # 初始化總和為 0
    # 遍歷從 start 到 end 之間的所有數字
    for i in range(start, end + 1):
        # 將數字轉換為字符串並檢查是否包含 '8' 或 '3'
        if '8' not in str(i) and '3' not in str(i):
            total_sum += i  # 如果不包含 '8' 或 '3'，將其加到總和中
    return total_sum  # 返回最終的累加和

# 呼叫 add_avoid_8_and_3 函式，計算從 1 到 100 之間不包含數字 '8' 或 '3' 的數字總和
result = add_avoid_8_and_3(1, 100)

# 輸出結果
print(result)
</pre>
<h4><span>心得與收穫</span></h4>
<ul>
<li>使用 Brython 的動態特性可以快速生成互動式網頁。</li>
<li>函式化設計讓程式易於擴展，例如新增其他累加規則。</li>
<li>HTML 與 Brython 的結合提高了程式的可讀性與可操作性。</li>
<li>理解了如何使用條件篩選與 Python 的字串操作來實現複雜功能。</li>
</ul>
<p></p>
<p><!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import html
from browser import document as doc
import random
import math

# 初始化畫布的函式
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div <= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 生成隨機顏色
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 繪製三個圓的區域塗色
def draw_three_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    # 定義不同區域的顏色
    color_dict = {}
    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            # 判斷點是否在每個圓內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
            # 判斷區域類型
            if in_circle1 and in_circle2 and in_circle3:
                if "intersection_all" not in color_dict:
                    color_dict["intersection_all"] = random_color_generator()
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                if "intersection_1_2" not in color_dict:
                    color_dict["intersection_1_2"] = random_color_generator()
                current_color = color_dict["intersection_1_2"]
            elif in_circle1 and in_circle3:
                if "intersection_1_3" not in color_dict:
                    color_dict["intersection_1_3"] = random_color_generator()
                current_color = color_dict["intersection_1_3"]
            elif in_circle2 and in_circle3:
                if "intersection_2_3" not in color_dict:
                    color_dict["intersection_2_3"] = random_color_generator()
                current_color = color_dict["intersection_2_3"]
            elif in_circle1:
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                current_color = "white"  # 背景色
            # 填充當前像素
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

# 測試參數
x1, y1, r1 = 150, 200, 100  # 圓1
x2, y2, r2 = 250, 200, 100  # 圓2
x3, y3, r3 = 200, 300, 100  # 圓3
draw_three_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</script>
</p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p></p>
<p>Brython Canvas Demo</p>
<script src="https://cdn.jsdelivr.net/npm/brython@3.11.0/brython.min.js" type="text/javascript"></script>
<!-- 畫布容器 -->
<div id="brython_div1"></div>
<!-- Brython 程式碼 -->
<script type="text/python">
        from browser import html  # 匯入 Brython 的 html 模組，用於操作 HTML 元素
        from browser import document as doc  # 匯入 Brython 的 document 物件，操作網頁中的 DOM
        
        # 創建畫布 (canvas)，並設置其大小為 2000x150 像素
        canvas = html.CANVAS(width=2000, height=150)
        # 取得 HTML 中 id 為 brython_div1 的元素，這樣可以把畫布放置到這個元素中
        brython_div = doc["brython_div1"]
        # 將畫布添加到 HTML 頁面中的指定元素中
        brython_div <= canvas
        
        # 取得畫布的 2D 繪圖上下文，這樣我們才能在畫布上繪製圖形
        ctx = canvas.getContext("2d")
        
        # 設置畫筆的寬度為 2 像素，這樣我們畫的線會較粗
        ctx.lineWidth = 2
        # 設置畫筆的顏色為黑色
        ctx.strokeStyle = "black"
        
        # 繪製 X 軸
        ctx.beginPath()
        ctx.moveTo(31, 42)
        ctx.lineTo(88, 42)
        ctx.stroke()
        
        # 繪製 Y 軸
        ctx.beginPath()
        ctx.moveTo(31, 42)
        ctx.lineTo(31, 134)
        ctx.stroke()
        
        # 添加文字標籤
        ctx.font = "20px Arial"
        ctx.fillStyle = "black"
        ctx.fillText("+X", 90, 64)
        ctx.fillText("+Y", 20, 150)
        ctx.font = "12px Arial"
        ctx.fillText("(31, 42)", 35, 59)
        
        # 設置位移偏移量
        x = 31
        y = 42
        
        # 繪製橙色六邊形
        ctx.beginPath()
        ctx.fillStyle = "#EBB000"
        ctx.moveTo(x + 40, y + 70)
        ctx.lineTo(x + 60, y + 40)
        ctx.lineTo(x + 90, y + 40)
        ctx.lineTo(x + 110, y + 70)
        ctx.lineTo(x + 90, y + 100)
        ctx.lineTo(x + 60, y + 100)
        ctx.closePath()
        ctx.fill()
        
        # 繪製綠色菱形
        ctx.beginPath()
        ctx.fillStyle = "#2CB05F"
        ctx.moveTo(x + 130, y + 70)
        ctx.lineTo(x + 150, y + 40)
        ctx.lineTo(x + 170, y + 70)
        ctx.lineTo(x + 150, y + 100)
        ctx.closePath()
        ctx.fill()
        
        # 繪製藍色三角形
        ctx.beginPath()
        ctx.fillStyle = "#73B7FF"
        ctx.moveTo(x + 174, y + 70)
        ctx.lineTo(x + 154, y + 100)
        ctx.lineTo(x + 194, y + 100)
        ctx.closePath()
        ctx.fill()
        
        # 繪製粉紅色圓形
        ctx.beginPath()
        ctx.fillStyle = "#FF458C"
        ctx.arc(x + 220, y + 70, 20, 0, 2 * 3.14159)
        ctx.fill()
        
        # 繪製黃色正方形
        ctx.beginPath()
        ctx.fillStyle = "#EBDF00"
        ctx.rect(x + 260, y + 43, 40, 40)
        ctx.fill()
        
        # 繪製藍色矩形
        ctx.beginPath()
        ctx.fillStyle = "#004A99"
        ctx.rect(x + 320, y + 53, 60, 20)
        ctx.fill()
    
</script>
<p>結構化設計 代碼結構清晰，層次分明，每段程式碼都專注於實現特定的圖形繪製功能，有助於後續的維護和修改。 透過使用 offset_x 和 offset_y，讓圖形定位以基準點為參考，使得排列與重新調整更加直觀與簡單。 多樣化形狀 示範了利用 Canvas API 繪製多種類型的幾何圖形，包括六邊形、菱形、三角形和圓形等。 使用鮮明的色彩區分不同形狀，進一步提升了視覺效果。 座標系統應用 通過繪製 X、Y 軸並標記原點，提供了明確的參考框架，方便後續進行圖形定位與設計調整。</p>
<p>sol:<a href="https://gist.githubusercontent.com/SKYang41323142/c70b109bffc53cbc516899ea72e6d312/raw/aed301c7d38b038442ecbbea6ca170501b95e1f4/hw2-w16_exam1-sol.py">code</a></p>
<p>Brython:<a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/c70b109bffc53cbc516899ea72e6d312/raw/aed301c7d38b038442ecbbea6ca170501b95e1f4/hw2-w16_exam1-sol.py">code</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/t6QUcKAVNkM?si=NehG3w8eGbrjSO32" title="YouTube video player" width="560"></iframe></p>
<p><!-- 導入 Brython 程式庫 --></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p><!-- 啟動 Brython --></p>
<script>
window.onload = function() {
    brython();  // 初始化 Brython
};
</script>
<!-- 畫布定位點 -->
<div id="brython_div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html  # 匯入 Brython 的 html 模組，用於操作 HTML 元素
from browser import document as doc  # 匯入 Brython 的 document 物件，操作網頁中的 DOM

# 創建畫布 (canvas)，並設置其大小為 2000x150 像素
canvas = html.CANVAS(width=2000, height=150)
# 取得 HTML 中 id 為 brython_div1 的元素，這樣可以把畫布放置到這個元素中
brython_div = doc["brython_div1"]
# 將畫布添加到 HTML 頁面中的指定元素中
brython_div &lt;= canvas

# 取得畫布的 2D 繪圖上下文，這樣我們才能在畫布上繪製圖形
ctx = canvas.getContext("2d")

# 設置畫筆的寬度為 2 像素，這樣我們畫的線會較粗
ctx.lineWidth = 2
# 設置畫筆的顏色為黑色
ctx.strokeStyle = "black"

# 繪製 X 軸 (從原點 (31, 42) 向右延伸到 (88, 42))
ctx.beginPath()  # 開始繪製新的路徑
ctx.moveTo(31, 42)  # 將畫筆移動到 X 軸起始點 (31, 42)
ctx.lineTo(88, 42)  # 畫一條線到 X 軸終點 (88, 42)
ctx.stroke()  # 完成繪製並顯示這條線

# 繪製 Y 軸 (從原點 (31, 42) 向下延伸到 (31, 134))
ctx.beginPath()  # 開始繪製新的路徑
ctx.moveTo(31, 42)  # 將畫筆移動到 Y 軸起始點 (31, 42)
ctx.lineTo(31, 134)  # 畫一條線到 Y 軸終點 (31, 134)
ctx.stroke()  # 完成繪製並顯示這條線

# 設置字體樣式為 20px 的 Arial 字型，並設置文字顏色為黑色
ctx.font = "20px Arial"  # 設定字型為 Arial，大小為 20px
ctx.fillStyle = "black"  # 設定填充文字的顏色為黑色

# 在畫布上 (90, 64) 位置添加文字 "+X"
ctx.fillText("+X", 90, 64)  # 在 X 軸正方向添加標籤 "+X"

# 在畫布上 (20, 150) 位置添加文字 "+Y"
ctx.fillText("+Y", 20, 150)  # 在 Y 軸正方向添加標籤 "+Y"

# 更改字體樣式為 12px 的 Arial 字型，用來標示原點座標
ctx.font = "12px Arial"  # 設定字型為 Arial，大小為 12px
ctx.fillStyle = "black"  # 設定填充文字的顏色為黑色
# 在 (35, 59) 位置顯示文字 "(31, 42)"
ctx.fillText("(31, 42)", 35, 59)  # 在原點旁邊顯示座標 "(31, 42)"

# 設置位移偏移量，x 和 y 變數對應新原點座標 (31, 42)
x = 31  # 定義 x 為原點的 X 座標
y = 42  # 定義 y 為原點的 Y 座標

# 繪製橙色六邊形
ctx.beginPath()  # 開始繪製六邊形
ctx.fillStyle = "#EBB000"  # 設置填充顏色為橙色
ctx.moveTo(x + 40, y + 70)  # 六邊形的第一個頂點
ctx.lineTo(x + 60, y + 40)  # 第二個頂點
ctx.lineTo(x + 90, y + 40)  # 第三個頂點
ctx.lineTo(x + 110, y + 70)  # 第四個頂點
ctx.lineTo(x + 90, y + 100)  # 第五個頂點
ctx.lineTo(x + 60, y + 100)  # 第六個頂點
ctx.closePath()  # 關閉路徑，使六邊形封閉
ctx.fill()  # 填充六邊形的顏色

# 繪製綠色菱形
ctx.beginPath()  # 開始繪製菱形
ctx.fillStyle = "#2CB05F"  # 設置填充顏色為綠色
ctx.moveTo(x + 130, y + 70)  # 菱形的第一個頂點
ctx.lineTo(x + 150, y + 40)  # 第二個頂點
ctx.lineTo(x + 170, y + 70)  # 第三個頂點
ctx.lineTo(x + 150, y + 100)  # 第四個頂點
ctx.closePath()  # 關閉路徑，將菱形閉合
ctx.fill()  # 填充菱形的顏色

# 繪製藍色三角形
ctx.beginPath()  # 開始繪製三角形
ctx.fillStyle = "#73B7FF"  # 設置填充顏色為藍色
ctx.moveTo(x + 174, y + 70)  # 三角形的第一個頂點
ctx.lineTo(x + 154, y + 100)  # 第二個頂點（左下角）
ctx.lineTo(x + 194, y + 100)  # 第三個頂點（右下角）
ctx.closePath()  # 關閉路徑，將三角形閉合
ctx.fill()  # 填充三角形的顏色

# 繪製粉紅色圓形
ctx.beginPath()  # 開始繪製圓形
ctx.fillStyle = "#FF458C"  # 設置填充顏色為粉紅色
ctx.arc(x + 220, y + 70, 20, 0, 2 * 3.14159)  # 定義圓形的圓心和半徑
ctx.fill()  # 填充圓形的顏色

# 繪製黃色正方形
ctx.beginPath()  # 開始繪製正方形
ctx.fillStyle = "#EBDF00"  # 設置填充顏色為黃色
ctx.rect(x + 260, y + 43, 40, 40)  # 定義正方形的左上角和邊長
ctx.fill()  # 填充正方形的顏色

# 繪製藍色矩形
ctx.beginPath()  # 開始繪製矩形
ctx.fillStyle = "#004A99"  # 設置填充顏色為藍色
ctx.rect(x + 320, y + 53, 60, 20)  # 定義矩形的左上角和寬高
ctx.fill()  # 填充矩形的顏色
</pre>
</div>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import document, html
import math

# 初始化畫布，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document["brython_div1"] <= canvas  # 將畫布加到指定的 div 中

setup_canvas()

# 設定 canvas 繪圖上下文
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")

# 設定座標原點 (31, 42)
origin_x, origin_y = 31, 42

# 繪製 X 軸
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(500, origin_y)
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()

# 繪製 Y 軸
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, 300)
ctx.stroke()

# 標記原點
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(31, 42)", origin_x + 5, origin_y - 5)

# 繪製形狀

# 六邊形 (紅色)
hex_x, hex_y = 100, 100
ctx.beginPath()
for i in range(6):
    angle = i * (2 * math.pi / 6)
    x = hex_x + 30 * math.cos(angle)
    y = hex_y + 30 * math.sin(angle)
    if i == 0:
        ctx.moveTo(x, y)
    else:
        ctx.lineTo(x, y)
ctx.closePath()
ctx.fillStyle = "red"
ctx.fill()

# 菱形 (綠色)
ctx.beginPath()
ctx.moveTo(160, 70)  # 上頂點
ctx.lineTo(180, 100)  # 右頂點
ctx.lineTo(160, 130)  # 下頂點
ctx.lineTo(140, 100)  # 左頂點
ctx.closePath()
ctx.fillStyle = "green"
ctx.fill()

# 三角形 (紫色)
ctx.beginPath()
ctx.moveTo(165, 130)
ctx.lineTo(205, 130)
ctx.lineTo(185, 100)
ctx.closePath()
ctx.fillStyle = "purple"
ctx.fill()

# 圓形 (黃色)
ctx.beginPath()
ctx.arc(230, 100, 30, 0, 2 * math.pi)
ctx.fillStyle = "yellow"
ctx.fill()

# 正方形 (粉紅色)
ctx.beginPath()
ctx.rect(265, 75, 50, 50)
ctx.fillStyle = "pink"
ctx.fill()

# 長方形 (青色)
ctx.beginPath()
ctx.rect(320, 90, 60, 20)
ctx.fillStyle = "cyan"
ctx.fill()
</script><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){ 
 
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']}); 
 
}
</script>
</p>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas
 
ctx = canvas.getContext("2d")
ctx.lineWidth = 2
 
ctx.strokeStyle = 'blue'  # 設定線顏色為藍色
ctx.beginPath()
ctx.moveTo(31, 42)  
ctx.lineTo(231, 42)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(31, 42) 
ctx.lineTo(31, 535)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(331, 42) 
ctx.lineTo(531, 42)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(531, 42) 
ctx.lineTo(531, 542)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(531, 542) 
ctx.lineTo(331, 542)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(31, 542) 
ctx.lineTo(231, 542)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(231, 542) 
ctx.lineTo(231, 442)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(231, 442) 
ctx.lineTo(331, 442)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(431, 542) 
ctx.lineTo(431, 342)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(431, 342) 
ctx.lineTo(131, 342)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(131, 342) 
ctx.lineTo(131, 442)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(331, 342) 
ctx.lineTo(331, 242)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(31, 242) 
ctx.lineTo(231, 242)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(231, 242) 
ctx.lineTo(231, 142)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(131, 142) 
ctx.lineTo(431, 142)  
ctx.stroke()
ctx.strokeStyle = 'blue'
 
ctx.beginPath()
ctx.moveTo(431, 142) 
ctx.lineTo(431, 242)  
ctx.stroke()
# 使用紅色字體標示起始點
ctx.fillStyle = 'red'  # 設定文字顏色為紅色
ctx.font = '16px Arial'  # 設定文字大小及字型
ctx.fillText("起始點 (31, 42)", 60, 50)  # 在座標 (31, 42) 處繪製文字
ctx.fillStyle = 'black' 
ctx.font = '16px Arial' 
ctx.fillText("X", 50, 15)  
ctx.fillStyle = 'black'
ctx.font = '16px Arial' 
ctx.fillText("Y", 0, 50)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.moveTo(0, 0) 
ctx.lineTo(50, 0)  
ctx.stroke()
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.moveTo(0, 0) 
ctx.lineTo(0, 50)  
ctx.stroke()
</script>
<strong>程式學習收穫：</strong></p>
<p><strong>改進方向與延伸運用：</strong><br/><strong></strong></p>
<ol>
<li>
<p><strong>互動式迷宮：</strong></p>
<ul>
<li>
<p>添加用戶輸入功能，例如使用鍵盤方向鍵控制迷宮中的移動。</p>
</li>
<li>
<p>在迷宮起點和終點設置指示點，用不同顏色或標誌表示，增強迷宮的互動性。</p>
</li>
</ul>
</li>
<li>
<p><strong>自動生成迷宮：</strong></p>
<ul>
<li>
<p>實現一個算法（如深度優先搜索或Prim's Algorithm），動態生成迷宮路徑，避免手動編碼迷宮結構。</p>
</li>
<li>
<p>將生成的迷宮數據存儲為陣列結構，然後根據數據繪製圖形。</p>
</li>
</ul>
</li>
<li>
<p><strong>色彩與動態：</strong></p>
<ul>
<li>
<p>在迷宮中使用不同的顏色表示牆壁、路徑和探索進度。</p>
</li>
<li>
<p>添加動畫效果，逐步展示迷宮的解路徑。</p>
</li>
</ul>
</li>
<li>
<p><strong>擴展功能：</strong></p>
<ul>
<li>
<p>將迷宮保存為圖像文件（例如 <code>.png</code>）。</p>
</li>
<li>
<p>添加計時器，讓用戶挑戰解迷宮的速度。</p>
</li>
<li>
<p>設置障礙或陷阱增加挑戰難度。</p>
</li>
</ul>
</li>
</ol>
<ul>
<li>
<p><strong>Canvas API 的應用：</strong> 深入學習 <code>beginPath()</code>、<code>moveTo()</code> 和 <code>lineTo()</code> 等核心方法，掌握如何控制圖形繪製過程。</p>
</li>
<li>
<p><strong>代碼可讀性提升：</strong> 系統性地添加註解，讓代碼不僅對自己而且對團隊成員更容易理解和修改。</p>
</li>
<li>
<p><strong>邏輯規劃：</strong> 將迷宮分段繪製，條理清晰，提升了程式設計的規劃能力。</p>
</li>
</ul>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6m1WKxhalWg?si=zHrVNMNfwjmSTGhf" title="YouTube video player" width="560"></iframe></p>
<p>sol:<a href="https://gist.githubusercontent.com/SKYang41323142/7c3b43aca1c7e70a421c5d65b3d0d2ff/raw/cdb82f7fb5a0d2cffd20aee22b57ef16e71e35b1/w16_exam2.py">code</a></p>
<p>Brython:<a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/7c3b43aca1c7e70a421c5d65b3d0d2ff/raw/cdb82f7fb5a0d2cffd20aee22b57ef16e71e35b1/w16_exam2.py">code</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 創建 canvas 元素，並設置畫布的寬度和高度為 1000x250 像素
canvas = html.CANVAS(width=1000, height=250)
brython_div = doc["brython_div1"]  # 取得在 HTML 中 id 為 "brython_div1" 的元素
brython_div &lt;= canvas  # 把 canvas 元素添加到指定的 div 中

# 獲取 canvas 元素的 2D 渲染上下文 (context)，這樣就能在畫布上進行繪圖操作
ctx = canvas.getContext("2d")

# 定義一個簡化的繪製直線的函數，這樣可以方便地多次使用
def draw_line(x1, y1, x2, y2, line_width=2, stroke_style="black"):
    """
    繪製一條直線，從 (x1, y1) 到 (x2, y2)，可設置線條寬度和顏色
    """
    ctx.lineWidth = line_width  # 設定線條的寬度
    ctx.strokeStyle = stroke_style  # 設定線條的顏色
    ctx.beginPath()  # 開始繪製路徑
    ctx.moveTo(x1, y1)  # 把畫筆移動到起始點 (x1, y1)
    ctx.lineTo(x2, y2)  # 繪製一條線條，從 (x1, y1) 到 (x2, y2)
    ctx.stroke()  # 進行繪製，顯示線條

# 定義一個繪製文本的函數
def draw_text(text, x, y, font="20px Arial", fill_style="black"):
    """
    在畫布上繪製文本，設置字體、顏色以及文本的位置
    """
    ctx.font = font  # 設置字體樣式
    ctx.fillStyle = fill_style  # 設置文本顏色
    ctx.fillText(text, x, y)  # 在 (x, y) 位置繪製文本

# 繪製 L 形的線條，這是一個簡單的 L 形結構
def draw_l_shape(x, y):
    """
    繪製 L 形的兩條線條
    第一條線從 (x, y) 到 (x + 300, y) — 水平線
    第二條線從 (x, y) 到 (x, y + 300) — 垂直線
    """
    draw_line(x, y, x + 300, y)  # 繪製水平線
    draw_line(x, y, x, y + 300)  # 繪製垂直線

# 繪製紅色短線，這兩條短線用來強調指定的點
def draw_red_short_lines(x, y):
    """
    繪製兩條紅色的短線，用來標記 (x, y) 的位置
    第一條是從 (x, y) 向下 1 像素的紅色短線
    第二條是從 (x, y) 向右 1 像素的紅色短線
    """
    draw_line(x, y, x, y + 1, line_width=5, stroke_style="red")  # 繪製垂直的紅色短線
    draw_line(x, y, x + 1, y, line_width=5, stroke_style="red")  # 繪製水平的紅色短線

# 繪製藍色的六邊形多邊形
def draw_blue_polygon():
    """
    繪製一個由 6 條藍色線條組成的封閉多邊形
    這個多邊形的每一條邊都是藍色的
    """
    # 各條邊的坐標順序
    draw_line(130, 130, 170, 130, stroke_style="blue")  # 第一條邊
    draw_line(190, 130, 230, 130, stroke_style="blue")  # 第二條邊
    draw_line(230, 130, 230, 230, stroke_style="blue")  # 第三條邊
    draw_line(230, 230, 190, 230, stroke_style="blue")  # 第四條邊
    draw_line(170, 230, 130, 230, stroke_style="blue")  # 第五條邊
    draw_line(130, 230, 130, 130, stroke_style="blue")  # 第六條邊

# 繪製矩形內部的藍色線條，這些線條在矩形內部創建更多的小區域
def draw_inner_lines_in_rectangle():
    """
    繪製矩形內部的藍色線條，形成更多的小區域
    """
    # 這些線條是繪製在 (150, 150) 和 (210, 230) 之間的區域
    draw_line(150, 150, 210, 150, stroke_style="blue")  # 上邊
    draw_line(210, 150, 210, 170, stroke_style="blue")  # 右邊
    draw_line(170, 150, 170, 170, stroke_style="blue")  # 中間的垂直線
    draw_line(170, 170, 130, 170, stroke_style="blue")  # 下邊
    draw_line(190, 170, 190, 190, stroke_style="blue")  # 內部短垂直線
    draw_line(190, 190, 210, 190, stroke_style="blue")  # 內部短水平線
    draw_line(210, 190, 210, 230, stroke_style="blue")  # 右邊
    draw_line(170, 170, 150, 170, stroke_style="blue")  # 左邊
    draw_line(150, 210, 150, 190, stroke_style="blue")  # 內部左邊
    draw_line(150, 190, 190, 190, stroke_style="blue")  # 內部底部
    draw_line(170, 230, 170, 210, stroke_style="blue")  # 內部右邊
    draw_line(170, 210, 190, 210, stroke_style="blue")  # 內部右側底部

# 主函數，負責調用所有繪圖函數來執行繪製操作
def main():
    """
    主函數，負責調用各種繪圖函數來完成圖形的繪製
    """
    # 繪製 L 形線條，起始位置為 (31, 42)
    draw_l_shape(31, 42)

    # 繪製紅色短線條，強調 (31, 42) 的位置
    draw_red_short_lines(31, 42)

    # 繪製文本 "(31,42)"，並將其放置在適當的 y 位置，避免與其他圖形重疊
    draw_text("(31,42)", 40, 35, font="20px Arial", fill_style="red")

    # 繪製藍色的多邊形
    draw_blue_polygon()

    # 繪製矩形內部的藍色線條，創建更多的小區域
    draw_inner_lines_in_rectangle()

# 調用主函數，執行所有繪圖操作
main()</pre>
<p></p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><span>一開始，我是透過ChatGPT了解如何繪製程式碼的功能和語法，接著自己進行計算並撰寫程式碼，尋找對應的色碼輸入，然後將程式碼上傳。這整個學期的過程，不僅讓我在課堂上學到了計算機程式的知識，也讓我學會了如何更有效地利用GPT來進行學習。我不再只是簡單地複製，而是透過不斷提問來解決理解上的問題，補足我的知識盲點，也改善了我的英文能力。GPT還能針對我不理解的地方進行加強說明，讓我在未來再次閱讀時，依然能夠理解。</span></p>
<p><span></span></p>
<ul>
<li><strong>靈活使用 HTML Canvas API</strong><br/>透過 <code>ctx.beginPath()</code> 等 API，可以有效管理繪圖路徑並避免線條相互干擾。此外，運用 <code>moveTo</code> 和 <code>lineTo</code> 等方法，清晰地描述迷宮的各部分結構，讓繪製過程井然有序。</li>
<li><strong>模組化與參數化設計</strong><br/>在程式中利用變數（如 <code>origin_x</code> 和 <code>origin_y</code>），可以輕鬆調整整體迷宮的位置偏移，讓繪圖更靈活。這種參數化的設計有助於後續維護及擴展。</li>
<li><strong>走迷宮邏輯的規劃</strong><br/>使用單獨的區塊繪製走迷宮路徑，將每一步都以簡單的線條指令表示，讓迷宮的解法可視化，直觀易懂。</li>
<li><strong>色彩與線條設置</strong><br/>運用 <code>strokeStyle</code> 和 <code>lineWidth</code>，明確區分迷宮框架與解路徑，提升圖形的可讀性和視覺效果。</li>
<li><strong>程式結構的清晰性</strong><br/>透過明確的註解，對程式的每個部分進行詳細解釋，這不僅方便日後檢視，也利於其他開發者理解。</li>
<li><strong>學習與應用 Canvas API 的實踐</strong><br/>這次實現迷宮繪製的過程提供了全面操作 Canvas 的實踐機會，涵蓋了基本線條繪製、文字繪製、色彩管理等多方面內容。</li>
<li><strong>改進空間</strong>
<ul>
<li>可以將迷宮的結構數據化，使用陣列或物件表示迷宮結構，進一步提高程式的可重用性。</li>
<li>自動生成迷宮路徑，增強互動性與挑戰性。</li>
<li>增加迷宮的動畫效果，讓視覺呈現更動態化。</li>
</ul>
</li>
</ul>
<p></p>
<p>sol:<a href="https://gist.githubusercontent.com/SKYang41323142/a7be9812f7e49923e52d7ae98b799dae/raw/a92eaa447225a7b352d4e94e43730eade0d15127/w16_exam3.py">code</a></p>
<p>Bython:<a href="https://mdecp2024.github.io/hw-SKYang41323142/content/Brython.html?src=https://gist.githubusercontent.com/SKYang41323142/a7be9812f7e49923e52d7ae98b799dae/raw/a92eaa447225a7b352d4e94e43730eade0d15127/w16_exam3.py">code</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/kX3UBQtE-C8?si=hAWAFxypt6z9f8rj" title="YouTube video player" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 創建 canvas 元素，並設置畫布的寬度和高度為 1000x300 像素
canvas = html.CANVAS(width=1000, height=300)
brython_div = doc["brython_div1"]  # 取得在 HTML 中 id 為 "brython_div1" 的元素
brython_div &lt;= canvas  # 把 canvas 元素添加到指定的 div 中

# 取得 canvas 元素的 2D 渲染上下文 (context)，這樣就能在畫布上進行繪圖操作
ctx = canvas.getContext("2d")

# 定義一個簡化的繪製直線的函數，這樣可以方便地多次使用
def draw_line(x1, y1, x2, y2, line_width=2, stroke_style="black"):
    """
    繪製一條直線，從 (x1, y1) 到 (x2, y2)，可設定線條寬度和顏色
    """
    ctx.lineWidth = line_width  # 設定線條的寬度
    ctx.strokeStyle = stroke_style  # 設定線條的顏色
    ctx.beginPath()  # 開始繪製路徑
    ctx.moveTo(x1, y1)  # 把畫筆移動到起始點 (x1, y1)
    ctx.lineTo(x2, y2)  # 繪製一條線條，從 (x1, y1) 到 (x2, y2)
    ctx.stroke()  # 進行繪製，顯示線條

# 定義一個繪製文本的函數
def draw_text(text, x, y, font="20px Arial", fill_style="black"):
    """
    在畫布上繪製文本，設定字體、顏色以及文本的位置
    """
    ctx.font = font  # 設定字體樣式
    ctx.fillStyle = fill_style  # 設定文本顏色
    ctx.fillText(text, x, y)  # 在 (x, y) 位置繪製文本
    ctx.font = "12px Arial"
    ctx.fillStyle = "red"
    ctx.fillText("入口", 170, 110)  # 在指定位置繪製“入口”字樣
    ctx.fillText("出口", 170, 260)  # 在指定位置繪製“出口”字樣

# 繪製紅色線條的函數
def draw_red_path():
    """
    繪製一條紅色路徑
    """
    # 繪製紅色路徑的每條線段
    draw_line(180, 130, 180, 140, stroke_style="red")  # 繪製直線段
    draw_line(180, 140, 220, 140, stroke_style="red")  # 繪製直線段
    draw_line(220, 140, 220, 180, stroke_style="red")  # 繪製直線段
    draw_line(220, 180, 200, 180, stroke_style="red")  # 繪製直線段
    draw_line(200, 180, 200, 160, stroke_style="red")  # 繪製直線段
    draw_line(200, 160, 180, 160, stroke_style="red")  # 繪製直線段
    draw_line(180, 160, 180, 180, stroke_style="red")  # 繪製直線段
    draw_line(180, 180, 140, 180, stroke_style="red")  # 繪製直線段
    draw_line(140, 180, 140, 220, stroke_style="red")  # 繪製直線段
    draw_line(140, 220, 160, 220, stroke_style="red")  # 繪製直線段
    draw_line(160, 220, 160, 200, stroke_style="red")  # 繪製直線段
    draw_line(160, 200, 200, 200, stroke_style="red")  # 繪製直線段
    draw_line(200, 200, 200, 220, stroke_style="red")  # 繪製直線段
    draw_line(200, 220, 180, 220, stroke_style="red")  # 繪製直線段
    draw_line(180, 220, 180, 230, stroke_style="red")  # 繪製直線段

# 繪製 L 形的線條，這是一條簡單的 L 形結構
def draw_l_shape(x, y):
    """
    繪製 L 形的兩條線條
    第一條線從 (x, y) 到 (x + 300, y) — 水平線
    第二條線從 (x, y) 到 (x, y + 300) — 垂直線
    """
    draw_line(x, y, x + 300, y)  # 繪製水平線
    draw_line(x, y, x, y + 300)  # 繪製垂直線

# 繪製紅色短線，這兩條短線用來強調指定的點
def draw_red_short_lines(x, y):
    """
    繪製兩條紅色的短線，用來標記 (x, y) 的位置
    第一條是從 (x, y) 向下 1 像素的紅色短線
    第二條是從 (x, y) 向右 1 像素的紅色短線
    """
    draw_line(x, y, x, y + 1, line_width=5, stroke_style="red")  # 繪製垂直的紅色短線
    draw_line(x, y, x + 1, y, line_width=5, stroke_style="red")  # 繪製水平的紅色短線

# 繪製藍色的六邊形多邊形
def draw_blue_polygon():
    """
    繪製一個由 6 條藍色線條組成的封閉多邊形
    這個多邊形的每一條邊都是黑色的
    """
    # 各條邊的坐標順序
    draw_line(130, 130, 170, 130, stroke_style="black")  # 第一條邊
    draw_line(190, 130, 230, 130, stroke_style="black")  # 第二條邊
    draw_line(230, 130, 230, 230, stroke_style="black")  # 第三條邊
    draw_line(230, 230, 190, 230, stroke_style="black")  # 第四條邊
    draw_line(170, 230, 130, 230, stroke_style="black")  # 第五條邊
    draw_line(130, 230, 130, 130, stroke_style="black")  # 第六條邊

# 繪製矩形內部的藍色線條，這些線條在矩形內部創建更多的小區域
def draw_inner_lines_in_rectangle():
    """
    繪製矩形內部的藍色線條，形成更多的小區域
    """
    # 這些線條是繪製在 (150, 150) 和 (210, 230) 之間的區域
    draw_line(150, 150, 210, 150, stroke_style="black")  # 上邊
    draw_line(210, 150, 210, 170, stroke_style="black")  # 右邊
    draw_line(170, 150, 170, 170, stroke_style="black")  # 中間的垂直線
    draw_line(170, 170, 130, 170, stroke_style="black")  # 下邊
    draw_line(190, 170, 190, 190, stroke_style="black")  # 內部短垂直線
    draw_line(190, 190, 210, 190, stroke_style="black")  # 內部短水平線
    draw_line(210, 190, 210, 230, stroke_style="black")  # 右邊
    draw_line(170, 170, 150, 170, stroke_style="black")  # 左邊
    draw_line(150, 210, 150, 190, stroke_style="black")  # 內部左邊
    draw_line(150, 190, 190, 190, stroke_style="black")  # 內部底部
    draw_line(170, 230, 170, 210, stroke_style="black")  # 內部右邊
    draw_line(170, 210, 190, 210, stroke_style="black")  # 內部右側底部

# 主函數，負責調用所有繪圖函數來執行繪製操作
def main():
    """
    主函數，負責調用各種繪圖函數來完成圖形的繪製
    """
    # 繪製 L 形線條，起始位置為 (31, 42)
    draw_l_shape(31, 42)

    # 繪製紅色短線條，強調 (31, 42) 的位置
    draw_red_short_lines(31, 42)

    # 繪製文本 "(31,42)"，並將其放置在適當的 y 位置，避免與其他圖形重疊
    draw_text("(31,42)", 40, 35, font="20px Arial", fill_style="red")

    # 繪製紅色路徑
    draw_red_path()

    # 繪製藍色的多邊形
    draw_blue_polygon()

    # 繪製矩形內部的藍色線條，創建更多的小區域
    draw_inner_lines_in_rectangle()

# 調用主函數，執行所有繪圖操作
main()</pre><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>